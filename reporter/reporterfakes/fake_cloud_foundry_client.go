// Code generated by counterfeiter. DO NOT EDIT.
package reporterfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-plugin/cf"
	"code.cloudfoundry.org/cpu-entitlement-plugin/reporter"
	"code.cloudfoundry.org/lager"
)

type FakeCloudFoundryClient struct {
	GetCurrentOrgStub        func(lager.Logger) (string, error)
	getCurrentOrgMutex       sync.RWMutex
	getCurrentOrgArgsForCall []struct {
		arg1 lager.Logger
	}
	getCurrentOrgReturns struct {
		result1 string
		result2 error
	}
	getCurrentOrgReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetSpacesStub        func(lager.Logger) ([]cf.Space, error)
	getSpacesMutex       sync.RWMutex
	getSpacesArgsForCall []struct {
		arg1 lager.Logger
	}
	getSpacesReturns struct {
		result1 []cf.Space
		result2 error
	}
	getSpacesReturnsOnCall map[int]struct {
		result1 []cf.Space
		result2 error
	}
	UsernameStub        func(lager.Logger) (string, error)
	usernameMutex       sync.RWMutex
	usernameArgsForCall []struct {
		arg1 lager.Logger
	}
	usernameReturns struct {
		result1 string
		result2 error
	}
	usernameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFoundryClient) GetCurrentOrg(arg1 lager.Logger) (string, error) {
	fake.getCurrentOrgMutex.Lock()
	ret, specificReturn := fake.getCurrentOrgReturnsOnCall[len(fake.getCurrentOrgArgsForCall)]
	fake.getCurrentOrgArgsForCall = append(fake.getCurrentOrgArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("GetCurrentOrg", []interface{}{arg1})
	fake.getCurrentOrgMutex.Unlock()
	if fake.GetCurrentOrgStub != nil {
		return fake.GetCurrentOrgStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCurrentOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) GetCurrentOrgCallCount() int {
	fake.getCurrentOrgMutex.RLock()
	defer fake.getCurrentOrgMutex.RUnlock()
	return len(fake.getCurrentOrgArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetCurrentOrgCalls(stub func(lager.Logger) (string, error)) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = stub
}

func (fake *FakeCloudFoundryClient) GetCurrentOrgArgsForCall(i int) lager.Logger {
	fake.getCurrentOrgMutex.RLock()
	defer fake.getCurrentOrgMutex.RUnlock()
	argsForCall := fake.getCurrentOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudFoundryClient) GetCurrentOrgReturns(result1 string, result2 error) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = nil
	fake.getCurrentOrgReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetCurrentOrgReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = nil
	if fake.getCurrentOrgReturnsOnCall == nil {
		fake.getCurrentOrgReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentOrgReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetSpaces(arg1 lager.Logger) ([]cf.Space, error) {
	fake.getSpacesMutex.Lock()
	ret, specificReturn := fake.getSpacesReturnsOnCall[len(fake.getSpacesArgsForCall)]
	fake.getSpacesArgsForCall = append(fake.getSpacesArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("GetSpaces", []interface{}{arg1})
	fake.getSpacesMutex.Unlock()
	if fake.GetSpacesStub != nil {
		return fake.GetSpacesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSpacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) GetSpacesCallCount() int {
	fake.getSpacesMutex.RLock()
	defer fake.getSpacesMutex.RUnlock()
	return len(fake.getSpacesArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetSpacesCalls(stub func(lager.Logger) ([]cf.Space, error)) {
	fake.getSpacesMutex.Lock()
	defer fake.getSpacesMutex.Unlock()
	fake.GetSpacesStub = stub
}

func (fake *FakeCloudFoundryClient) GetSpacesArgsForCall(i int) lager.Logger {
	fake.getSpacesMutex.RLock()
	defer fake.getSpacesMutex.RUnlock()
	argsForCall := fake.getSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudFoundryClient) GetSpacesReturns(result1 []cf.Space, result2 error) {
	fake.getSpacesMutex.Lock()
	defer fake.getSpacesMutex.Unlock()
	fake.GetSpacesStub = nil
	fake.getSpacesReturns = struct {
		result1 []cf.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetSpacesReturnsOnCall(i int, result1 []cf.Space, result2 error) {
	fake.getSpacesMutex.Lock()
	defer fake.getSpacesMutex.Unlock()
	fake.GetSpacesStub = nil
	if fake.getSpacesReturnsOnCall == nil {
		fake.getSpacesReturnsOnCall = make(map[int]struct {
			result1 []cf.Space
			result2 error
		})
	}
	fake.getSpacesReturnsOnCall[i] = struct {
		result1 []cf.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) Username(arg1 lager.Logger) (string, error) {
	fake.usernameMutex.Lock()
	ret, specificReturn := fake.usernameReturnsOnCall[len(fake.usernameArgsForCall)]
	fake.usernameArgsForCall = append(fake.usernameArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("Username", []interface{}{arg1})
	fake.usernameMutex.Unlock()
	if fake.UsernameStub != nil {
		return fake.UsernameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.usernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) UsernameCallCount() int {
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	return len(fake.usernameArgsForCall)
}

func (fake *FakeCloudFoundryClient) UsernameCalls(stub func(lager.Logger) (string, error)) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = stub
}

func (fake *FakeCloudFoundryClient) UsernameArgsForCall(i int) lager.Logger {
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	argsForCall := fake.usernameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudFoundryClient) UsernameReturns(result1 string, result2 error) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = nil
	fake.usernameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) UsernameReturnsOnCall(i int, result1 string, result2 error) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = nil
	if fake.usernameReturnsOnCall == nil {
		fake.usernameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.usernameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCurrentOrgMutex.RLock()
	defer fake.getCurrentOrgMutex.RUnlock()
	fake.getSpacesMutex.RLock()
	defer fake.getSpacesMutex.RUnlock()
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudFoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reporter.CloudFoundryClient = new(FakeCloudFoundryClient)
