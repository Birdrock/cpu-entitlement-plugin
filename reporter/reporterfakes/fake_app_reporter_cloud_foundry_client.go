// Code generated by counterfeiter. DO NOT EDIT.
package reporterfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-plugin/cf"
	"code.cloudfoundry.org/cpu-entitlement-plugin/reporter"
	"code.cloudfoundry.org/lager"
)

type FakeAppReporterCloudFoundryClient struct {
	GetApplicationStub        func(lager.Logger, string) (cf.Application, error)
	getApplicationMutex       sync.RWMutex
	getApplicationArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	getApplicationReturns struct {
		result1 cf.Application
		result2 error
	}
	getApplicationReturnsOnCall map[int]struct {
		result1 cf.Application
		result2 error
	}
	GetCurrentOrgStub        func(lager.Logger) (string, error)
	getCurrentOrgMutex       sync.RWMutex
	getCurrentOrgArgsForCall []struct {
		arg1 lager.Logger
	}
	getCurrentOrgReturns struct {
		result1 string
		result2 error
	}
	getCurrentOrgReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetCurrentSpaceStub        func(lager.Logger) (string, error)
	getCurrentSpaceMutex       sync.RWMutex
	getCurrentSpaceArgsForCall []struct {
		arg1 lager.Logger
	}
	getCurrentSpaceReturns struct {
		result1 string
		result2 error
	}
	getCurrentSpaceReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	UsernameStub        func(lager.Logger) (string, error)
	usernameMutex       sync.RWMutex
	usernameArgsForCall []struct {
		arg1 lager.Logger
	}
	usernameReturns struct {
		result1 string
		result2 error
	}
	usernameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppReporterCloudFoundryClient) GetApplication(arg1 lager.Logger, arg2 string) (cf.Application, error) {
	fake.getApplicationMutex.Lock()
	ret, specificReturn := fake.getApplicationReturnsOnCall[len(fake.getApplicationArgsForCall)]
	fake.getApplicationArgsForCall = append(fake.getApplicationArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetApplication", []interface{}{arg1, arg2})
	fake.getApplicationMutex.Unlock()
	if fake.GetApplicationStub != nil {
		return fake.GetApplicationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getApplicationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppReporterCloudFoundryClient) GetApplicationCallCount() int {
	fake.getApplicationMutex.RLock()
	defer fake.getApplicationMutex.RUnlock()
	return len(fake.getApplicationArgsForCall)
}

func (fake *FakeAppReporterCloudFoundryClient) GetApplicationCalls(stub func(lager.Logger, string) (cf.Application, error)) {
	fake.getApplicationMutex.Lock()
	defer fake.getApplicationMutex.Unlock()
	fake.GetApplicationStub = stub
}

func (fake *FakeAppReporterCloudFoundryClient) GetApplicationArgsForCall(i int) (lager.Logger, string) {
	fake.getApplicationMutex.RLock()
	defer fake.getApplicationMutex.RUnlock()
	argsForCall := fake.getApplicationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAppReporterCloudFoundryClient) GetApplicationReturns(result1 cf.Application, result2 error) {
	fake.getApplicationMutex.Lock()
	defer fake.getApplicationMutex.Unlock()
	fake.GetApplicationStub = nil
	fake.getApplicationReturns = struct {
		result1 cf.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeAppReporterCloudFoundryClient) GetApplicationReturnsOnCall(i int, result1 cf.Application, result2 error) {
	fake.getApplicationMutex.Lock()
	defer fake.getApplicationMutex.Unlock()
	fake.GetApplicationStub = nil
	if fake.getApplicationReturnsOnCall == nil {
		fake.getApplicationReturnsOnCall = make(map[int]struct {
			result1 cf.Application
			result2 error
		})
	}
	fake.getApplicationReturnsOnCall[i] = struct {
		result1 cf.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentOrg(arg1 lager.Logger) (string, error) {
	fake.getCurrentOrgMutex.Lock()
	ret, specificReturn := fake.getCurrentOrgReturnsOnCall[len(fake.getCurrentOrgArgsForCall)]
	fake.getCurrentOrgArgsForCall = append(fake.getCurrentOrgArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("GetCurrentOrg", []interface{}{arg1})
	fake.getCurrentOrgMutex.Unlock()
	if fake.GetCurrentOrgStub != nil {
		return fake.GetCurrentOrgStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCurrentOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentOrgCallCount() int {
	fake.getCurrentOrgMutex.RLock()
	defer fake.getCurrentOrgMutex.RUnlock()
	return len(fake.getCurrentOrgArgsForCall)
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentOrgCalls(stub func(lager.Logger) (string, error)) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = stub
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentOrgArgsForCall(i int) lager.Logger {
	fake.getCurrentOrgMutex.RLock()
	defer fake.getCurrentOrgMutex.RUnlock()
	argsForCall := fake.getCurrentOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentOrgReturns(result1 string, result2 error) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = nil
	fake.getCurrentOrgReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentOrgReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = nil
	if fake.getCurrentOrgReturnsOnCall == nil {
		fake.getCurrentOrgReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentOrgReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentSpace(arg1 lager.Logger) (string, error) {
	fake.getCurrentSpaceMutex.Lock()
	ret, specificReturn := fake.getCurrentSpaceReturnsOnCall[len(fake.getCurrentSpaceArgsForCall)]
	fake.getCurrentSpaceArgsForCall = append(fake.getCurrentSpaceArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("GetCurrentSpace", []interface{}{arg1})
	fake.getCurrentSpaceMutex.Unlock()
	if fake.GetCurrentSpaceStub != nil {
		return fake.GetCurrentSpaceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCurrentSpaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentSpaceCallCount() int {
	fake.getCurrentSpaceMutex.RLock()
	defer fake.getCurrentSpaceMutex.RUnlock()
	return len(fake.getCurrentSpaceArgsForCall)
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentSpaceCalls(stub func(lager.Logger) (string, error)) {
	fake.getCurrentSpaceMutex.Lock()
	defer fake.getCurrentSpaceMutex.Unlock()
	fake.GetCurrentSpaceStub = stub
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentSpaceArgsForCall(i int) lager.Logger {
	fake.getCurrentSpaceMutex.RLock()
	defer fake.getCurrentSpaceMutex.RUnlock()
	argsForCall := fake.getCurrentSpaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentSpaceReturns(result1 string, result2 error) {
	fake.getCurrentSpaceMutex.Lock()
	defer fake.getCurrentSpaceMutex.Unlock()
	fake.GetCurrentSpaceStub = nil
	fake.getCurrentSpaceReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAppReporterCloudFoundryClient) GetCurrentSpaceReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentSpaceMutex.Lock()
	defer fake.getCurrentSpaceMutex.Unlock()
	fake.GetCurrentSpaceStub = nil
	if fake.getCurrentSpaceReturnsOnCall == nil {
		fake.getCurrentSpaceReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentSpaceReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAppReporterCloudFoundryClient) Username(arg1 lager.Logger) (string, error) {
	fake.usernameMutex.Lock()
	ret, specificReturn := fake.usernameReturnsOnCall[len(fake.usernameArgsForCall)]
	fake.usernameArgsForCall = append(fake.usernameArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("Username", []interface{}{arg1})
	fake.usernameMutex.Unlock()
	if fake.UsernameStub != nil {
		return fake.UsernameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.usernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppReporterCloudFoundryClient) UsernameCallCount() int {
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	return len(fake.usernameArgsForCall)
}

func (fake *FakeAppReporterCloudFoundryClient) UsernameCalls(stub func(lager.Logger) (string, error)) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = stub
}

func (fake *FakeAppReporterCloudFoundryClient) UsernameArgsForCall(i int) lager.Logger {
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	argsForCall := fake.usernameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAppReporterCloudFoundryClient) UsernameReturns(result1 string, result2 error) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = nil
	fake.usernameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAppReporterCloudFoundryClient) UsernameReturnsOnCall(i int, result1 string, result2 error) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = nil
	if fake.usernameReturnsOnCall == nil {
		fake.usernameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.usernameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAppReporterCloudFoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getApplicationMutex.RLock()
	defer fake.getApplicationMutex.RUnlock()
	fake.getCurrentOrgMutex.RLock()
	defer fake.getCurrentOrgMutex.RUnlock()
	fake.getCurrentSpaceMutex.RLock()
	defer fake.getCurrentSpaceMutex.RUnlock()
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppReporterCloudFoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reporter.AppReporterCloudFoundryClient = new(FakeAppReporterCloudFoundryClient)
