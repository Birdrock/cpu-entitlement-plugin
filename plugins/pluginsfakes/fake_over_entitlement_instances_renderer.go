// Code generated by counterfeiter. DO NOT EDIT.
package pluginsfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-plugin/plugins"
	"code.cloudfoundry.org/cpu-entitlement-plugin/reporter"
	"code.cloudfoundry.org/lager"
)

type FakeOverEntitlementInstancesRenderer struct {
	RenderStub        func(lager.Logger, reporter.OEIReport) error
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
		arg1 lager.Logger
		arg2 reporter.OEIReport
	}
	renderReturns struct {
		result1 error
	}
	renderReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOverEntitlementInstancesRenderer) Render(arg1 lager.Logger, arg2 reporter.OEIReport) error {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
		arg1 lager.Logger
		arg2 reporter.OEIReport
	}{arg1, arg2})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{arg1, arg2})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOverEntitlementInstancesRenderer) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeOverEntitlementInstancesRenderer) RenderCalls(stub func(lager.Logger, reporter.OEIReport) error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeOverEntitlementInstancesRenderer) RenderArgsForCall(i int) (lager.Logger, reporter.OEIReport) {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	argsForCall := fake.renderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOverEntitlementInstancesRenderer) RenderReturns(result1 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOverEntitlementInstancesRenderer) RenderReturnsOnCall(i int, result1 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOverEntitlementInstancesRenderer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOverEntitlementInstancesRenderer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugins.OverEntitlementInstancesRenderer = new(FakeOverEntitlementInstancesRenderer)
