// Code generated by counterfeiter. DO NOT EDIT.
package pluginsfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-plugin/plugins"
	"code.cloudfoundry.org/cpu-entitlement-plugin/reporter"
	"code.cloudfoundry.org/lager"
)

type FakeOverEntitlementInstancesReporter struct {
	OverEntitlementInstancesStub        func(lager.Logger) (reporter.OEIReport, error)
	overEntitlementInstancesMutex       sync.RWMutex
	overEntitlementInstancesArgsForCall []struct {
		arg1 lager.Logger
	}
	overEntitlementInstancesReturns struct {
		result1 reporter.OEIReport
		result2 error
	}
	overEntitlementInstancesReturnsOnCall map[int]struct {
		result1 reporter.OEIReport
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOverEntitlementInstancesReporter) OverEntitlementInstances(arg1 lager.Logger) (reporter.OEIReport, error) {
	fake.overEntitlementInstancesMutex.Lock()
	ret, specificReturn := fake.overEntitlementInstancesReturnsOnCall[len(fake.overEntitlementInstancesArgsForCall)]
	fake.overEntitlementInstancesArgsForCall = append(fake.overEntitlementInstancesArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("OverEntitlementInstances", []interface{}{arg1})
	fake.overEntitlementInstancesMutex.Unlock()
	if fake.OverEntitlementInstancesStub != nil {
		return fake.OverEntitlementInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.overEntitlementInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOverEntitlementInstancesReporter) OverEntitlementInstancesCallCount() int {
	fake.overEntitlementInstancesMutex.RLock()
	defer fake.overEntitlementInstancesMutex.RUnlock()
	return len(fake.overEntitlementInstancesArgsForCall)
}

func (fake *FakeOverEntitlementInstancesReporter) OverEntitlementInstancesCalls(stub func(lager.Logger) (reporter.OEIReport, error)) {
	fake.overEntitlementInstancesMutex.Lock()
	defer fake.overEntitlementInstancesMutex.Unlock()
	fake.OverEntitlementInstancesStub = stub
}

func (fake *FakeOverEntitlementInstancesReporter) OverEntitlementInstancesArgsForCall(i int) lager.Logger {
	fake.overEntitlementInstancesMutex.RLock()
	defer fake.overEntitlementInstancesMutex.RUnlock()
	argsForCall := fake.overEntitlementInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOverEntitlementInstancesReporter) OverEntitlementInstancesReturns(result1 reporter.OEIReport, result2 error) {
	fake.overEntitlementInstancesMutex.Lock()
	defer fake.overEntitlementInstancesMutex.Unlock()
	fake.OverEntitlementInstancesStub = nil
	fake.overEntitlementInstancesReturns = struct {
		result1 reporter.OEIReport
		result2 error
	}{result1, result2}
}

func (fake *FakeOverEntitlementInstancesReporter) OverEntitlementInstancesReturnsOnCall(i int, result1 reporter.OEIReport, result2 error) {
	fake.overEntitlementInstancesMutex.Lock()
	defer fake.overEntitlementInstancesMutex.Unlock()
	fake.OverEntitlementInstancesStub = nil
	if fake.overEntitlementInstancesReturnsOnCall == nil {
		fake.overEntitlementInstancesReturnsOnCall = make(map[int]struct {
			result1 reporter.OEIReport
			result2 error
		})
	}
	fake.overEntitlementInstancesReturnsOnCall[i] = struct {
		result1 reporter.OEIReport
		result2 error
	}{result1, result2}
}

func (fake *FakeOverEntitlementInstancesReporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.overEntitlementInstancesMutex.RLock()
	defer fake.overEntitlementInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOverEntitlementInstancesReporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugins.OverEntitlementInstancesReporter = new(FakeOverEntitlementInstancesReporter)
