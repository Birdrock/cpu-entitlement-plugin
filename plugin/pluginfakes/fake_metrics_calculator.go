// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-plugin/calculator"
	"code.cloudfoundry.org/cpu-entitlement-plugin/metrics"
	"code.cloudfoundry.org/cpu-entitlement-plugin/plugin"
)

type FakeMetricsCalculator struct {
	CalculateInstanceInfosStub        func([]metrics.Usage) []calculator.InstanceInfo
	calculateInstanceInfosMutex       sync.RWMutex
	calculateInstanceInfosArgsForCall []struct {
		arg1 []metrics.Usage
	}
	calculateInstanceInfosReturns struct {
		result1 []calculator.InstanceInfo
	}
	calculateInstanceInfosReturnsOnCall map[int]struct {
		result1 []calculator.InstanceInfo
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsCalculator) CalculateInstanceInfos(arg1 []metrics.Usage) []calculator.InstanceInfo {
	var arg1Copy []metrics.Usage
	if arg1 != nil {
		arg1Copy = make([]metrics.Usage, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.calculateInstanceInfosMutex.Lock()
	ret, specificReturn := fake.calculateInstanceInfosReturnsOnCall[len(fake.calculateInstanceInfosArgsForCall)]
	fake.calculateInstanceInfosArgsForCall = append(fake.calculateInstanceInfosArgsForCall, struct {
		arg1 []metrics.Usage
	}{arg1Copy})
	fake.recordInvocation("CalculateInstanceInfos", []interface{}{arg1Copy})
	fake.calculateInstanceInfosMutex.Unlock()
	if fake.CalculateInstanceInfosStub != nil {
		return fake.CalculateInstanceInfosStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.calculateInstanceInfosReturns
	return fakeReturns.result1
}

func (fake *FakeMetricsCalculator) CalculateInstanceInfosCallCount() int {
	fake.calculateInstanceInfosMutex.RLock()
	defer fake.calculateInstanceInfosMutex.RUnlock()
	return len(fake.calculateInstanceInfosArgsForCall)
}

func (fake *FakeMetricsCalculator) CalculateInstanceInfosCalls(stub func([]metrics.Usage) []calculator.InstanceInfo) {
	fake.calculateInstanceInfosMutex.Lock()
	defer fake.calculateInstanceInfosMutex.Unlock()
	fake.CalculateInstanceInfosStub = stub
}

func (fake *FakeMetricsCalculator) CalculateInstanceInfosArgsForCall(i int) []metrics.Usage {
	fake.calculateInstanceInfosMutex.RLock()
	defer fake.calculateInstanceInfosMutex.RUnlock()
	argsForCall := fake.calculateInstanceInfosArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetricsCalculator) CalculateInstanceInfosReturns(result1 []calculator.InstanceInfo) {
	fake.calculateInstanceInfosMutex.Lock()
	defer fake.calculateInstanceInfosMutex.Unlock()
	fake.CalculateInstanceInfosStub = nil
	fake.calculateInstanceInfosReturns = struct {
		result1 []calculator.InstanceInfo
	}{result1}
}

func (fake *FakeMetricsCalculator) CalculateInstanceInfosReturnsOnCall(i int, result1 []calculator.InstanceInfo) {
	fake.calculateInstanceInfosMutex.Lock()
	defer fake.calculateInstanceInfosMutex.Unlock()
	fake.CalculateInstanceInfosStub = nil
	if fake.calculateInstanceInfosReturnsOnCall == nil {
		fake.calculateInstanceInfosReturnsOnCall = make(map[int]struct {
			result1 []calculator.InstanceInfo
		})
	}
	fake.calculateInstanceInfosReturnsOnCall[i] = struct {
		result1 []calculator.InstanceInfo
	}{result1}
}

func (fake *FakeMetricsCalculator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.calculateInstanceInfosMutex.RLock()
	defer fake.calculateInstanceInfosMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsCalculator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.MetricsCalculator = new(FakeMetricsCalculator)
