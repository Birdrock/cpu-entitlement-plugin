// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-plugin/plugin"
	"code.cloudfoundry.org/cpu-entitlement-plugin/usagemetric"
)

type FakeMetricFetcher struct {
	FetchLatestStub        func(string, int) ([]usagemetric.UsageMetric, error)
	fetchLatestMutex       sync.RWMutex
	fetchLatestArgsForCall []struct {
		arg1 string
		arg2 int
	}
	fetchLatestReturns struct {
		result1 []usagemetric.UsageMetric
		result2 error
	}
	fetchLatestReturnsOnCall map[int]struct {
		result1 []usagemetric.UsageMetric
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricFetcher) FetchLatest(arg1 string, arg2 int) ([]usagemetric.UsageMetric, error) {
	fake.fetchLatestMutex.Lock()
	ret, specificReturn := fake.fetchLatestReturnsOnCall[len(fake.fetchLatestArgsForCall)]
	fake.fetchLatestArgsForCall = append(fake.fetchLatestArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("FetchLatest", []interface{}{arg1, arg2})
	fake.fetchLatestMutex.Unlock()
	if fake.FetchLatestStub != nil {
		return fake.FetchLatestStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchLatestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricFetcher) FetchLatestCallCount() int {
	fake.fetchLatestMutex.RLock()
	defer fake.fetchLatestMutex.RUnlock()
	return len(fake.fetchLatestArgsForCall)
}

func (fake *FakeMetricFetcher) FetchLatestCalls(stub func(string, int) ([]usagemetric.UsageMetric, error)) {
	fake.fetchLatestMutex.Lock()
	defer fake.fetchLatestMutex.Unlock()
	fake.FetchLatestStub = stub
}

func (fake *FakeMetricFetcher) FetchLatestArgsForCall(i int) (string, int) {
	fake.fetchLatestMutex.RLock()
	defer fake.fetchLatestMutex.RUnlock()
	argsForCall := fake.fetchLatestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetricFetcher) FetchLatestReturns(result1 []usagemetric.UsageMetric, result2 error) {
	fake.fetchLatestMutex.Lock()
	defer fake.fetchLatestMutex.Unlock()
	fake.FetchLatestStub = nil
	fake.fetchLatestReturns = struct {
		result1 []usagemetric.UsageMetric
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricFetcher) FetchLatestReturnsOnCall(i int, result1 []usagemetric.UsageMetric, result2 error) {
	fake.fetchLatestMutex.Lock()
	defer fake.fetchLatestMutex.Unlock()
	fake.FetchLatestStub = nil
	if fake.fetchLatestReturnsOnCall == nil {
		fake.fetchLatestReturnsOnCall = make(map[int]struct {
			result1 []usagemetric.UsageMetric
			result2 error
		})
	}
	fake.fetchLatestReturnsOnCall[i] = struct {
		result1 []usagemetric.UsageMetric
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchLatestMutex.RLock()
	defer fake.fetchLatestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.MetricFetcher = new(FakeMetricFetcher)
