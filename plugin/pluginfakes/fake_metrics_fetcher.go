// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-plugin/metrics"
	"code.cloudfoundry.org/cpu-entitlement-plugin/plugin"
)

type FakeMetricsFetcher struct {
	FetchAllStub        func(string, int) ([]metrics.InstanceData, error)
	fetchAllMutex       sync.RWMutex
	fetchAllArgsForCall []struct {
		arg1 string
		arg2 int
	}
	fetchAllReturns struct {
		result1 []metrics.InstanceData
		result2 error
	}
	fetchAllReturnsOnCall map[int]struct {
		result1 []metrics.InstanceData
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsFetcher) FetchAll(arg1 string, arg2 int) ([]metrics.InstanceData, error) {
	fake.fetchAllMutex.Lock()
	ret, specificReturn := fake.fetchAllReturnsOnCall[len(fake.fetchAllArgsForCall)]
	fake.fetchAllArgsForCall = append(fake.fetchAllArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("FetchAll", []interface{}{arg1, arg2})
	fake.fetchAllMutex.Unlock()
	if fake.FetchAllStub != nil {
		return fake.FetchAllStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchAllReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsFetcher) FetchAllCallCount() int {
	fake.fetchAllMutex.RLock()
	defer fake.fetchAllMutex.RUnlock()
	return len(fake.fetchAllArgsForCall)
}

func (fake *FakeMetricsFetcher) FetchAllCalls(stub func(string, int) ([]metrics.InstanceData, error)) {
	fake.fetchAllMutex.Lock()
	defer fake.fetchAllMutex.Unlock()
	fake.FetchAllStub = stub
}

func (fake *FakeMetricsFetcher) FetchAllArgsForCall(i int) (string, int) {
	fake.fetchAllMutex.RLock()
	defer fake.fetchAllMutex.RUnlock()
	argsForCall := fake.fetchAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetricsFetcher) FetchAllReturns(result1 []metrics.InstanceData, result2 error) {
	fake.fetchAllMutex.Lock()
	defer fake.fetchAllMutex.Unlock()
	fake.FetchAllStub = nil
	fake.fetchAllReturns = struct {
		result1 []metrics.InstanceData
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsFetcher) FetchAllReturnsOnCall(i int, result1 []metrics.InstanceData, result2 error) {
	fake.fetchAllMutex.Lock()
	defer fake.fetchAllMutex.Unlock()
	fake.FetchAllStub = nil
	if fake.fetchAllReturnsOnCall == nil {
		fake.fetchAllReturnsOnCall = make(map[int]struct {
			result1 []metrics.InstanceData
			result2 error
		})
	}
	fake.fetchAllReturnsOnCall[i] = struct {
		result1 []metrics.InstanceData
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchAllMutex.RLock()
	defer fake.fetchAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.MetricsFetcher = new(FakeMetricsFetcher)
