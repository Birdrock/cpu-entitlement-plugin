// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-plugin/calculator"
	"code.cloudfoundry.org/cpu-entitlement-plugin/metadata"
	"code.cloudfoundry.org/cpu-entitlement-plugin/plugin"
)

type FakeMetricsRenderer struct {
	ShowInfosStub        func(metadata.CFAppInfo, []calculator.InstanceInfo) error
	showInfosMutex       sync.RWMutex
	showInfosArgsForCall []struct {
		arg1 metadata.CFAppInfo
		arg2 []calculator.InstanceInfo
	}
	showInfosReturns struct {
		result1 error
	}
	showInfosReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsRenderer) ShowInfos(arg1 metadata.CFAppInfo, arg2 []calculator.InstanceInfo) error {
	var arg2Copy []calculator.InstanceInfo
	if arg2 != nil {
		arg2Copy = make([]calculator.InstanceInfo, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.showInfosMutex.Lock()
	ret, specificReturn := fake.showInfosReturnsOnCall[len(fake.showInfosArgsForCall)]
	fake.showInfosArgsForCall = append(fake.showInfosArgsForCall, struct {
		arg1 metadata.CFAppInfo
		arg2 []calculator.InstanceInfo
	}{arg1, arg2Copy})
	fake.recordInvocation("ShowInfos", []interface{}{arg1, arg2Copy})
	fake.showInfosMutex.Unlock()
	if fake.ShowInfosStub != nil {
		return fake.ShowInfosStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.showInfosReturns
	return fakeReturns.result1
}

func (fake *FakeMetricsRenderer) ShowInfosCallCount() int {
	fake.showInfosMutex.RLock()
	defer fake.showInfosMutex.RUnlock()
	return len(fake.showInfosArgsForCall)
}

func (fake *FakeMetricsRenderer) ShowInfosCalls(stub func(metadata.CFAppInfo, []calculator.InstanceInfo) error) {
	fake.showInfosMutex.Lock()
	defer fake.showInfosMutex.Unlock()
	fake.ShowInfosStub = stub
}

func (fake *FakeMetricsRenderer) ShowInfosArgsForCall(i int) (metadata.CFAppInfo, []calculator.InstanceInfo) {
	fake.showInfosMutex.RLock()
	defer fake.showInfosMutex.RUnlock()
	argsForCall := fake.showInfosArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetricsRenderer) ShowInfosReturns(result1 error) {
	fake.showInfosMutex.Lock()
	defer fake.showInfosMutex.Unlock()
	fake.ShowInfosStub = nil
	fake.showInfosReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMetricsRenderer) ShowInfosReturnsOnCall(i int, result1 error) {
	fake.showInfosMutex.Lock()
	defer fake.showInfosMutex.Unlock()
	fake.ShowInfosStub = nil
	if fake.showInfosReturnsOnCall == nil {
		fake.showInfosReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.showInfosReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMetricsRenderer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.showInfosMutex.RLock()
	defer fake.showInfosMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsRenderer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.MetricsRenderer = new(FakeMetricsRenderer)
