// Code generated by counterfeiter. DO NOT EDIT.
package cffakes

import (
	"sync"

	plugin_models "code.cloudfoundry.org/cli/plugin/models"
	"code.cloudfoundry.org/cpu-entitlement-plugin/cf"
)

type FakeCli struct {
	GetAppStub        func(string) (plugin_models.GetAppModel, error)
	getAppMutex       sync.RWMutex
	getAppArgsForCall []struct {
		arg1 string
	}
	getAppReturns struct {
		result1 plugin_models.GetAppModel
		result2 error
	}
	getAppReturnsOnCall map[int]struct {
		result1 plugin_models.GetAppModel
		result2 error
	}
	GetCurrentOrgStub        func() (plugin_models.Organization, error)
	getCurrentOrgMutex       sync.RWMutex
	getCurrentOrgArgsForCall []struct {
	}
	getCurrentOrgReturns struct {
		result1 plugin_models.Organization
		result2 error
	}
	getCurrentOrgReturnsOnCall map[int]struct {
		result1 plugin_models.Organization
		result2 error
	}
	GetCurrentSpaceStub        func() (plugin_models.Space, error)
	getCurrentSpaceMutex       sync.RWMutex
	getCurrentSpaceArgsForCall []struct {
	}
	getCurrentSpaceReturns struct {
		result1 plugin_models.Space
		result2 error
	}
	getCurrentSpaceReturnsOnCall map[int]struct {
		result1 plugin_models.Space
		result2 error
	}
	GetSpaceStub        func(string) (plugin_models.GetSpace_Model, error)
	getSpaceMutex       sync.RWMutex
	getSpaceArgsForCall []struct {
		arg1 string
	}
	getSpaceReturns struct {
		result1 plugin_models.GetSpace_Model
		result2 error
	}
	getSpaceReturnsOnCall map[int]struct {
		result1 plugin_models.GetSpace_Model
		result2 error
	}
	GetSpacesStub        func() ([]plugin_models.GetSpaces_Model, error)
	getSpacesMutex       sync.RWMutex
	getSpacesArgsForCall []struct {
	}
	getSpacesReturns struct {
		result1 []plugin_models.GetSpaces_Model
		result2 error
	}
	getSpacesReturnsOnCall map[int]struct {
		result1 []plugin_models.GetSpaces_Model
		result2 error
	}
	UsernameStub        func() (string, error)
	usernameMutex       sync.RWMutex
	usernameArgsForCall []struct {
	}
	usernameReturns struct {
		result1 string
		result2 error
	}
	usernameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCli) GetApp(arg1 string) (plugin_models.GetAppModel, error) {
	fake.getAppMutex.Lock()
	ret, specificReturn := fake.getAppReturnsOnCall[len(fake.getAppArgsForCall)]
	fake.getAppArgsForCall = append(fake.getAppArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAppStub
	fakeReturns := fake.getAppReturns
	fake.recordInvocation("GetApp", []interface{}{arg1})
	fake.getAppMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCli) GetAppCallCount() int {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return len(fake.getAppArgsForCall)
}

func (fake *FakeCli) GetAppCalls(stub func(string) (plugin_models.GetAppModel, error)) {
	fake.getAppMutex.Lock()
	defer fake.getAppMutex.Unlock()
	fake.GetAppStub = stub
}

func (fake *FakeCli) GetAppArgsForCall(i int) string {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	argsForCall := fake.getAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCli) GetAppReturns(result1 plugin_models.GetAppModel, result2 error) {
	fake.getAppMutex.Lock()
	defer fake.getAppMutex.Unlock()
	fake.GetAppStub = nil
	fake.getAppReturns = struct {
		result1 plugin_models.GetAppModel
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetAppReturnsOnCall(i int, result1 plugin_models.GetAppModel, result2 error) {
	fake.getAppMutex.Lock()
	defer fake.getAppMutex.Unlock()
	fake.GetAppStub = nil
	if fake.getAppReturnsOnCall == nil {
		fake.getAppReturnsOnCall = make(map[int]struct {
			result1 plugin_models.GetAppModel
			result2 error
		})
	}
	fake.getAppReturnsOnCall[i] = struct {
		result1 plugin_models.GetAppModel
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetCurrentOrg() (plugin_models.Organization, error) {
	fake.getCurrentOrgMutex.Lock()
	ret, specificReturn := fake.getCurrentOrgReturnsOnCall[len(fake.getCurrentOrgArgsForCall)]
	fake.getCurrentOrgArgsForCall = append(fake.getCurrentOrgArgsForCall, struct {
	}{})
	stub := fake.GetCurrentOrgStub
	fakeReturns := fake.getCurrentOrgReturns
	fake.recordInvocation("GetCurrentOrg", []interface{}{})
	fake.getCurrentOrgMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCli) GetCurrentOrgCallCount() int {
	fake.getCurrentOrgMutex.RLock()
	defer fake.getCurrentOrgMutex.RUnlock()
	return len(fake.getCurrentOrgArgsForCall)
}

func (fake *FakeCli) GetCurrentOrgCalls(stub func() (plugin_models.Organization, error)) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = stub
}

func (fake *FakeCli) GetCurrentOrgReturns(result1 plugin_models.Organization, result2 error) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = nil
	fake.getCurrentOrgReturns = struct {
		result1 plugin_models.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetCurrentOrgReturnsOnCall(i int, result1 plugin_models.Organization, result2 error) {
	fake.getCurrentOrgMutex.Lock()
	defer fake.getCurrentOrgMutex.Unlock()
	fake.GetCurrentOrgStub = nil
	if fake.getCurrentOrgReturnsOnCall == nil {
		fake.getCurrentOrgReturnsOnCall = make(map[int]struct {
			result1 plugin_models.Organization
			result2 error
		})
	}
	fake.getCurrentOrgReturnsOnCall[i] = struct {
		result1 plugin_models.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetCurrentSpace() (plugin_models.Space, error) {
	fake.getCurrentSpaceMutex.Lock()
	ret, specificReturn := fake.getCurrentSpaceReturnsOnCall[len(fake.getCurrentSpaceArgsForCall)]
	fake.getCurrentSpaceArgsForCall = append(fake.getCurrentSpaceArgsForCall, struct {
	}{})
	stub := fake.GetCurrentSpaceStub
	fakeReturns := fake.getCurrentSpaceReturns
	fake.recordInvocation("GetCurrentSpace", []interface{}{})
	fake.getCurrentSpaceMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCli) GetCurrentSpaceCallCount() int {
	fake.getCurrentSpaceMutex.RLock()
	defer fake.getCurrentSpaceMutex.RUnlock()
	return len(fake.getCurrentSpaceArgsForCall)
}

func (fake *FakeCli) GetCurrentSpaceCalls(stub func() (plugin_models.Space, error)) {
	fake.getCurrentSpaceMutex.Lock()
	defer fake.getCurrentSpaceMutex.Unlock()
	fake.GetCurrentSpaceStub = stub
}

func (fake *FakeCli) GetCurrentSpaceReturns(result1 plugin_models.Space, result2 error) {
	fake.getCurrentSpaceMutex.Lock()
	defer fake.getCurrentSpaceMutex.Unlock()
	fake.GetCurrentSpaceStub = nil
	fake.getCurrentSpaceReturns = struct {
		result1 plugin_models.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetCurrentSpaceReturnsOnCall(i int, result1 plugin_models.Space, result2 error) {
	fake.getCurrentSpaceMutex.Lock()
	defer fake.getCurrentSpaceMutex.Unlock()
	fake.GetCurrentSpaceStub = nil
	if fake.getCurrentSpaceReturnsOnCall == nil {
		fake.getCurrentSpaceReturnsOnCall = make(map[int]struct {
			result1 plugin_models.Space
			result2 error
		})
	}
	fake.getCurrentSpaceReturnsOnCall[i] = struct {
		result1 plugin_models.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetSpace(arg1 string) (plugin_models.GetSpace_Model, error) {
	fake.getSpaceMutex.Lock()
	ret, specificReturn := fake.getSpaceReturnsOnCall[len(fake.getSpaceArgsForCall)]
	fake.getSpaceArgsForCall = append(fake.getSpaceArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSpaceStub
	fakeReturns := fake.getSpaceReturns
	fake.recordInvocation("GetSpace", []interface{}{arg1})
	fake.getSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCli) GetSpaceCallCount() int {
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	return len(fake.getSpaceArgsForCall)
}

func (fake *FakeCli) GetSpaceCalls(stub func(string) (plugin_models.GetSpace_Model, error)) {
	fake.getSpaceMutex.Lock()
	defer fake.getSpaceMutex.Unlock()
	fake.GetSpaceStub = stub
}

func (fake *FakeCli) GetSpaceArgsForCall(i int) string {
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	argsForCall := fake.getSpaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCli) GetSpaceReturns(result1 plugin_models.GetSpace_Model, result2 error) {
	fake.getSpaceMutex.Lock()
	defer fake.getSpaceMutex.Unlock()
	fake.GetSpaceStub = nil
	fake.getSpaceReturns = struct {
		result1 plugin_models.GetSpace_Model
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetSpaceReturnsOnCall(i int, result1 plugin_models.GetSpace_Model, result2 error) {
	fake.getSpaceMutex.Lock()
	defer fake.getSpaceMutex.Unlock()
	fake.GetSpaceStub = nil
	if fake.getSpaceReturnsOnCall == nil {
		fake.getSpaceReturnsOnCall = make(map[int]struct {
			result1 plugin_models.GetSpace_Model
			result2 error
		})
	}
	fake.getSpaceReturnsOnCall[i] = struct {
		result1 plugin_models.GetSpace_Model
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetSpaces() ([]plugin_models.GetSpaces_Model, error) {
	fake.getSpacesMutex.Lock()
	ret, specificReturn := fake.getSpacesReturnsOnCall[len(fake.getSpacesArgsForCall)]
	fake.getSpacesArgsForCall = append(fake.getSpacesArgsForCall, struct {
	}{})
	stub := fake.GetSpacesStub
	fakeReturns := fake.getSpacesReturns
	fake.recordInvocation("GetSpaces", []interface{}{})
	fake.getSpacesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCli) GetSpacesCallCount() int {
	fake.getSpacesMutex.RLock()
	defer fake.getSpacesMutex.RUnlock()
	return len(fake.getSpacesArgsForCall)
}

func (fake *FakeCli) GetSpacesCalls(stub func() ([]plugin_models.GetSpaces_Model, error)) {
	fake.getSpacesMutex.Lock()
	defer fake.getSpacesMutex.Unlock()
	fake.GetSpacesStub = stub
}

func (fake *FakeCli) GetSpacesReturns(result1 []plugin_models.GetSpaces_Model, result2 error) {
	fake.getSpacesMutex.Lock()
	defer fake.getSpacesMutex.Unlock()
	fake.GetSpacesStub = nil
	fake.getSpacesReturns = struct {
		result1 []plugin_models.GetSpaces_Model
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) GetSpacesReturnsOnCall(i int, result1 []plugin_models.GetSpaces_Model, result2 error) {
	fake.getSpacesMutex.Lock()
	defer fake.getSpacesMutex.Unlock()
	fake.GetSpacesStub = nil
	if fake.getSpacesReturnsOnCall == nil {
		fake.getSpacesReturnsOnCall = make(map[int]struct {
			result1 []plugin_models.GetSpaces_Model
			result2 error
		})
	}
	fake.getSpacesReturnsOnCall[i] = struct {
		result1 []plugin_models.GetSpaces_Model
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) Username() (string, error) {
	fake.usernameMutex.Lock()
	ret, specificReturn := fake.usernameReturnsOnCall[len(fake.usernameArgsForCall)]
	fake.usernameArgsForCall = append(fake.usernameArgsForCall, struct {
	}{})
	stub := fake.UsernameStub
	fakeReturns := fake.usernameReturns
	fake.recordInvocation("Username", []interface{}{})
	fake.usernameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCli) UsernameCallCount() int {
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	return len(fake.usernameArgsForCall)
}

func (fake *FakeCli) UsernameCalls(stub func() (string, error)) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = stub
}

func (fake *FakeCli) UsernameReturns(result1 string, result2 error) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = nil
	fake.usernameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) UsernameReturnsOnCall(i int, result1 string, result2 error) {
	fake.usernameMutex.Lock()
	defer fake.usernameMutex.Unlock()
	fake.UsernameStub = nil
	if fake.usernameReturnsOnCall == nil {
		fake.usernameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.usernameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCli) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	fake.getCurrentOrgMutex.RLock()
	defer fake.getCurrentOrgMutex.RUnlock()
	fake.getCurrentSpaceMutex.RLock()
	defer fake.getCurrentSpaceMutex.RUnlock()
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	fake.getSpacesMutex.RLock()
	defer fake.getSpacesMutex.RUnlock()
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCli) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.Cli = new(FakeCli)
